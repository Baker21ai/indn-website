generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model activity_logs {
  id        String   @id
  userId    String?
  action    String
  entityId  String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([action])
  @@index([createdAt])
  @@index([userId])
}

model announcements {
  id             String         @id
  title          String
  content        String
  targetAudience TargetAudience @default(all)
  authorId       String
  publishedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  users          users          @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@index([publishedAt])
  @@index([targetAudience])
}

model documents {
  id            String           @id
  title         String
  category      DocumentCategory @default(other)
  fileUrl       String
  accessLevel   AccessLevel      @default(board)
  fileSize      Int?
  mimeType      String?
  downloadCount Int              @default(0)
  uploadedById  String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime
  users         users            @relation(fields: [uploadedById], references: [id])

  @@index([accessLevel])
  @@index([category])
  @@index([uploadedById])
}

model donations {
  id                   String   @id
  donorId              String
  amount               Decimal  @db.Decimal(10, 2)
  currency             String   @default("usd")
  stripePaymentId      String   @unique
  stripeCustomerId     String?
  isRecurring          Boolean  @default(false)
  stripeSubscriptionId String?
  designation          String?
  notes                String?
  createdAt            DateTime @default(now())
  donors               donors   @relation(fields: [donorId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([donorId])
  @@index([stripePaymentId])
}

model donors {
  id             String      @id
  userId         String      @unique
  donorType      DonorType   @default(individual)
  displayName    String
  tier           DonorTier?
  totalDonated   Decimal     @default(0) @db.Decimal(10, 2)
  isRecurring    Boolean     @default(false)
  isAnonymous    Boolean     @default(false)
  location       String?
  logoUrl        String?
  website        String?
  notes          String?
  memberSince    DateTime    @default(now())
  credlyBadgeId  String?
  credlyBadgeUrl String?
  badgeIssuedAt  DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime
  donations      donations[]
  users          users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([donorType])
  @@index([tier])
  @@index([totalDonated])
}

model events {
  id                String              @id
  title             String
  slug              String              @unique
  description       String
  category          EventCategory       @default(cultural)
  startDate         DateTime
  endDate           DateTime?
  location          String?
  isVirtual         Boolean             @default(false)
  capacity          Int?
  registrationCount Int                 @default(0)
  price             Decimal?            @db.Decimal(10, 2)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  shifts            shifts[]
  volunteer_signups volunteer_signups[]

  @@index([category])
  @@index([slug])
  @@index([startDate])
}

model pages {
  id          String    @id
  slug        String    @unique
  title       String
  content     String
  metaTitle   String?
  metaDesc    String?
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime

  @@index([isPublished])
  @@index([slug])
}

model shift_assignments {
  id          String    @id
  shiftId     String
  userId      String
  checkedIn   Boolean   @default(false)
  checkInTime DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  shifts      shifts    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  users       users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shiftId, userId])
  @@index([shiftId])
  @@index([userId])
}

model shifts {
  id                String              @id
  eventId           String
  role              String
  startTime         DateTime
  endTime           DateTime
  capacity          Int                 @default(5)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  shift_assignments shift_assignments[]
  events            events              @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([startTime])
}

model users {
  id                 String              @id
  email              String              @unique
  passwordHash       String
  name               String
  role               Role                @default(volunteer)
  isActive           Boolean             @default(true)
  phone              String?
  avatarUrl          String?
  emailVerified      DateTime?
  verificationToken  String?             @unique
  resetToken         String?             @unique
  resetTokenExpiry   DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  lastLoginAt        DateTime?
  announcements      announcements[]
  documents          documents[]
  donors             donors?
  shift_assignments  shift_assignments[]
  volunteer_profiles volunteer_profiles?
  volunteer_signups  volunteer_signups[]

  @@index([email])
  @@index([role, isActive])
  @@index([verificationToken])
  @@index([resetToken])
}

model volunteer_profiles {
  id                String   @id
  userId            String   @unique
  skills            Json?
  interests         Json?
  availability      String?
  experienceLevel   String?
  locationPref      String?
  hoursCompleted    Int      @default(0)
  applicationStatus String   @default("approved")
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model volunteer_signups {
  id               String   @id
  eventId          String
  userId           String
  availability     Json
  rolesInterested  Json
  tshirtSize       String?
  emergencyContact String?
  skillsExperience String?
  status           String   @default("pending")
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  events           events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  users            users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([status])
  @@index([userId])
}

enum AccessLevel {
  public
  volunteer
  board
  admin
}

enum DocumentCategory {
  runbook
  checklist
  budget
  vendor_contacts
  template
  other
}

enum DonorTier {
  turtle
  wolf
  bear
  eagle
}

enum DonorType {
  individual
  company
}

enum EventCategory {
  cultural
  educational
  fundraising
  virtual
}

enum Role {
  volunteer
  board_member
  admin
}

enum TargetAudience {
  all
  volunteers
  board
}
